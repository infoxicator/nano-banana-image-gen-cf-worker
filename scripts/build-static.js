const fs = require('fs');
const path = require('path');

const distDir = path.join(__dirname, '../dist/static');
const outputFile = path.join(__dirname, '../src/static-files.ts');

function readFilesRecursively(dir, basePath = '') {
  const files = {};
  const items = fs.readdirSync(dir, { withFileTypes: true });
  
  for (const item of items) {
    const fullPath = path.join(dir, item.name);
    const relativePath = path.join(basePath, item.name).replace(/\\/g, '/');
    
    if (item.isDirectory()) {
      Object.assign(files, readFilesRecursively(fullPath, relativePath));
    } else {
      const content = fs.readFileSync(fullPath, 'utf-8');
      const webPath = '/' + relativePath;
      files[webPath] = content;
    }
  }
  
  return files;
}

function generateStaticFilesModule() {
  if (!fs.existsSync(distDir)) {
    console.error('Build directory not found. Run "npm run build:frontend" first.');
    process.exit(1);
  }
  
  const files = readFilesRecursively(distDir);
  
  const fileEntries = Object.entries(files)
    .map(([path, content]) => {
      // Escape the content for TypeScript string literal
      const escapedContent = content
        .replace(/\\/g, '\\\\')
        .replace(/`/g, '\\`')
        .replace(/\${/g, '\\${');
      
      return `  '${path}': \`${escapedContent}\``;
    })
    .join(',\n');
  
  const moduleContent = `// Auto-generated file - do not edit manually
// Generated by scripts/build-static.js

const staticFiles: Record<string, string> = {
${fileEntries}
};

export default staticFiles;
`;

  // Only write if content changed to avoid triggering unnecessary rebuilds
  let existingContent = '';
  if (fs.existsSync(outputFile)) {
    existingContent = fs.readFileSync(outputFile, 'utf-8');
  }
  
  if (existingContent !== moduleContent) {
    fs.writeFileSync(outputFile, moduleContent, 'utf-8');
    console.log(`Generated ${outputFile} with ${Object.keys(files).length} static files`);
  } else {
    console.log(`${outputFile} unchanged - skipping write`);
  }
}

generateStaticFilesModule();